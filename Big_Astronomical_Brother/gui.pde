/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void controlPanelDraw(PApplet appc, GWinData data) { //_CODE_:controlPanel:393323:
  appc.background(230);
} //_CODE_:controlPanel:393323:

public void spawnedObjectChanged(GDropList source, GEvent event) { //_CODE_:spawnedObject:681934:
  switch (spawnedObject.getSelectedText()){
    case "Asteroid":
      spawnRadius.setNumeric(1.0, 5.0, 1.0);
      spawnMass.setNumeric(0.1, 9.9, 1.0);
      exponentMass.setNumeric(3.0, 20.0, 3.0);
      break;
    case "Planet":
      spawnRadius.setNumeric(0.3, 8.7, 1.0);
      spawnMass.setNumeric(0.1, 9.9, 1.0);
      exponentMass.setNumeric(19.0, 26.0, 19.0);
      break;
    case "Star":
      spawnRadius.setNumeric(5.8, 400.0, 10.0);
      spawnMass.setNumeric(0.1, 9.9, 1.0);
      exponentMass.setNumeric(30.0, 32.0, 30.0);
      break;
  }
} //_CODE_:spawnedObject:681934:

public void timeStepChanged(GKnob source, GEvent event) { //_CODE_:timeStepControl:952075:
  timeStep = timeStepControl.getValueI();
  timeRatio.setText("1 year every " + round(15*60/timeStep * pow(10, 3)) / pow(10, 3) + " seconds");
} //_CODE_:timeStepControl:952075:

public void spawnVelocityChanged(GSlider2D source, GEvent event) { //_CODE_:spawnVelocity:936818:

} //_CODE_:spawnVelocity:936818:

public void spawnRadiusChanged(GTextField source, GEvent event) { //_CODE_:spawnRadius:965509:

} //_CODE_:spawnRadius:965509:

public void spawnMassChanged(GTextField source, GEvent event) { //_CODE_:spawnMass:883847:

} //_CODE_:spawnMass:883847:

public void exponentMassChanged(GTextField source, GEvent event) { //_CODE_:exponentMass:509216:
  
} //_CODE_:exponentMass:509216:

synchronized public void propertiesChanged(PApplet appc, GWinData data) { //_CODE_:objectProperties:848126:
  appc.background(230);
} //_CODE_:objectProperties:848126:

public void inputChanged(GTextField source, GEvent event) { //_CODE_:inputField:889161:
  //println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:inputField:889161:

public void input2DChanged(GSlider2D source, GEvent event) { //_CODE_:input2D:828822:
  //println("input2D - GSlider2D >> GEvent." + event + " @ " + millis());
} //_CODE_:input2D:828822:

public void extraInputChanged(GTextField source, GEvent event) { //_CODE_:extraInput:426148:
  //println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:extraInput:426148:

public void typeSelected(GDropList source, GEvent event) { //_CODE_:typeList:967986:
  //println("typeList - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:typeList:967986:

public void fieldChanged(GDropList source, GEvent event) { //_CODE_:fieldList:888386:
  
  switch(fieldList.getSelectedText()){
    case "Name":
    case "Mass":
    case "Radius":
    case "Position":
    case "Velocity":
    case "Acceleration":
    case "Type":
    case "Colour":
    case "Temperature":
      
      break;
  
  
  }
} //_CODE_:fieldList:888386:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Big Astronomical Brother");
  controlPanel = GWindow.getWindow(this, "Control Panel", 0, 0, 480, 140, JAVA2D);
  controlPanel.noLoop();
  controlPanel.setActionOnClose(G4P.EXIT_APP);
  controlPanel.addDrawHandler(this, "controlPanelDraw");
  spawnedObject = new GDropList(controlPanel, 20, 40, 80, 80, 3, 20);
  spawnedObject.setItems(loadStrings("list_681934"), 0);
  spawnedObject.addEventHandler(this, "spawnedObjectChanged");
  timeStepControl = new GKnob(controlPanel, 120, 40, 60, 60, 0.8);
  timeStepControl.setTurnRange(0, 360);
  timeStepControl.setTurnMode(GKnob.CTRL_ANGULAR);
  timeStepControl.setShowArcOnly(false);
  timeStepControl.setOverArcOnly(false);
  timeStepControl.setIncludeOverBezel(false);
  timeStepControl.setShowTrack(true);
  timeStepControl.setLimits(60.0, 1.0, 600.0);
  timeStepControl.setNbrTicks(20);
  timeStepControl.setShowTicks(true);
  timeStepControl.setOpaque(false);
  timeStepControl.addEventHandler(this, "timeStepChanged");
  objectLabel = new GLabel(controlPanel, 20, 20, 80, 20);
  objectLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  objectLabel.setText("Object Type");
  objectLabel.setOpaque(false);
  timeLabel = new GLabel(controlPanel, 120, 0, 60, 40);
  timeLabel.setTextAlign(GAlign.CENTER, GAlign.BOTTOM);
  timeLabel.setText("Time Modifier");
  timeLabel.setOpaque(false);
  timeRatio = new GLabel(controlPanel, 90, 100, 120, 40);
  timeRatio.setTextAlign(GAlign.CENTER, GAlign.TOP);
  timeRatio.setText("My label");
  timeRatio.setOpaque(false);
  radiusLabel = new GLabel(controlPanel, 190, 20, 60, 20);
  radiusLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  radiusLabel.setText("Radius");
  radiusLabel.setOpaque(false);
  spawnVelocity = new GSlider2D(controlPanel, 260, 40, 60, 60);
  spawnVelocity.setLimitsX(0.0, -1.0, 1.0);
  spawnVelocity.setLimitsY(0.0, -1.0, 1.0);
  spawnVelocity.setNumberFormat(G4P.DECIMAL, 2);
  spawnVelocity.setOpaque(true);
  spawnVelocity.addEventHandler(this, "spawnVelocityChanged");
  velocityLabel = new GLabel(controlPanel, 260, 20, 60, 20);
  velocityLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  velocityLabel.setText("Velocity");
  velocityLabel.setOpaque(false);
  massLabel = new GLabel(controlPanel, 330, 20, 60, 20);
  massLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  massLabel.setText("Mass");
  massLabel.setOpaque(false);
  spawnRadius = new GTextField(controlPanel, 190, 40, 60, 20, G4P.SCROLLBARS_NONE);
  spawnRadius.setText("1");
  spawnRadius.setOpaque(true);
  spawnRadius.addEventHandler(this, "spawnRadiusChanged");
  spawnMass = new GTextField(controlPanel, 330, 40, 60, 20, G4P.SCROLLBARS_NONE);
  spawnMass.setText("1");
  spawnMass.setOpaque(true);
  spawnMass.addEventHandler(this, "spawnMassChanged");
  exponentMassLabel = new GLabel(controlPanel, 400, 20, 60, 20);
  exponentMassLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  exponentMassLabel.setText("*10^");
  exponentMassLabel.setOpaque(false);
  exponentMass = new GTextField(controlPanel, 400, 40, 60, 20, G4P.SCROLLBARS_NONE);
  exponentMass.setText("10");
  exponentMass.setOpaque(true);
  exponentMass.addEventHandler(this, "exponentMassChanged");
  objectProperties = GWindow.getWindow(this, "Object Properties", 0, 180, 270, 180, JAVA2D);
  objectProperties.noLoop();
  objectProperties.setActionOnClose(G4P.CLOSE_WINDOW);
  objectProperties.addDrawHandler(this, "propertiesChanged");
  inputField = new GTextField(objectProperties, 120, 50, 60, 20, G4P.SCROLLBARS_NONE);
  inputField.setOpaque(true);
  inputField.addEventHandler(this, "inputChanged");
  input2D = new GSlider2D(objectProperties, 120, 100, 60, 60);
  input2D.setLimitsX(0.5, 0.0, 1.0);
  input2D.setLimitsY(0.5, 0.0, 1.0);
  input2D.setNumberFormat(G4P.DECIMAL, 2);
  input2D.setOpaque(true);
  input2D.addEventHandler(this, "input2DChanged");
  extraInput = new GTextField(objectProperties, 190, 50, 60, 20, G4P.SCROLLBARS_NONE);
  extraInput.setOpaque(true);
  extraInput.addEventHandler(this, "extraInputChanged");
  typeList = new GDropList(objectProperties, 190, 100, 60, 80, 3, 20);
  typeList.setItems(loadStrings("list_967986"), 0);
  typeList.addEventHandler(this, "typeSelected");
  ifLabel = new GLabel(objectProperties, 120, 30, 60, 20);
  ifLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  ifLabel.setText("Name");
  ifLabel.setOpaque(false);
  eiLabel = new GLabel(objectProperties, 190, 30, 60, 20);
  eiLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  eiLabel.setText("x10^");
  eiLabel.setOpaque(false);
  i2dLabel = new GLabel(objectProperties, 120, 80, 60, 20);
  i2dLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  i2dLabel.setText("Velocity");
  i2dLabel.setOpaque(false);
  tLabel = new GLabel(objectProperties, 190, 80, 60, 20);
  tLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  tLabel.setText("Type");
  tLabel.setOpaque(false);
  optionLabel = new GLabel(objectProperties, 20, 10, 80, 20);
  optionLabel.setText("Field Options");
  optionLabel.setOpaque(false);
  fieldList = new GDropList(objectProperties, 20, 30, 90, 140, 6, 10);
  fieldList.setItems(loadStrings("list_888386"), 0);
  fieldList.addEventHandler(this, "fieldChanged");
  controlPanel.loop();
  objectProperties.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow controlPanel;
GDropList spawnedObject; 
GKnob timeStepControl; 
GLabel objectLabel; 
GLabel timeLabel; 
GLabel timeRatio; 
GLabel radiusLabel; 
GSlider2D spawnVelocity; 
GLabel velocityLabel; 
GLabel massLabel; 
GTextField spawnRadius; 
GTextField spawnMass; 
GLabel exponentMassLabel; 
GTextField exponentMass; 
GWindow objectProperties;
GTextField inputField; 
GSlider2D input2D; 
GTextField extraInput; 
GDropList typeList; 
GLabel ifLabel; 
GLabel eiLabel; 
GLabel i2dLabel; 
GLabel tLabel; 
GLabel optionLabel; 
GDropList fieldList; 
