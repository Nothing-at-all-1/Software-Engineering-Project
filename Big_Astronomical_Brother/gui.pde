/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void controlPanelDraw(PApplet appc, GWinData data) { //_CODE_:controlPanel:393323:
  appc.background(230);
} //_CODE_:controlPanel:393323:

public void spawnedObjectChanged(GDropList source, GEvent event) { //_CODE_:spawnedObject:681934:
  switch (spawnedObject.getSelectedText()){
    case "Asteroid":
      spawnRadius.setNumeric(1.0, 5.0, 1.0);
      spawnMass.setNumeric(0.1, 9.9, 1.0);
      exponentMass.setNumeric(3.0, 20.0, 3.0);
      break;
    case "Planet":
      spawnRadius.setNumeric(0.3, 8.7, 1.0);
      spawnMass.setNumeric(0.1, 9.9, 1.0);
      exponentMass.setNumeric(19.0, 26.0, 19.0);
      break;
    case "Star":
      spawnRadius.setNumeric(5.8, 400.0, 10.0);
      spawnMass.setNumeric(0.1, 9.9, 1.0);
      exponentMass.setNumeric(30.0, 32.0, 30.0);
      break;
  }
} //_CODE_:spawnedObject:681934:

public void timeStepChanged(GKnob source, GEvent event) { //_CODE_:timeStepControl:952075:
  timeStep = timeStepControl.getValueI();
  timeRatio.setText("1 year every " + round(15*60/timeStep * pow(10, 3)) / pow(10, 3) + " seconds");
} //_CODE_:timeStepControl:952075:

public void spawnVelocityChanged(GSlider2D source, GEvent event) { //_CODE_:spawnVelocity:936818:

} //_CODE_:spawnVelocity:936818:

public void spawnRadiusChanged(GTextField source, GEvent event) { //_CODE_:spawnRadius:965509:

} //_CODE_:spawnRadius:965509:

public void spawnMassChanged(GTextField source, GEvent event) { //_CODE_:spawnMass:883847:

} //_CODE_:spawnMass:883847:

public void exponentMassChanged(GTextField source, GEvent event) { //_CODE_:exponentMass:509216:
  
} //_CODE_:exponentMass:509216:

public void resertClicked(GButton source, GEvent event) { //_CODE_:resetButton:528726:
  reset();
} //_CODE_:resetButton:528726:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Big Astronomical Brother");
  controlPanel = GWindow.getWindow(this, "Control Panel", 0, 0, 480, 140, JAVA2D);
  controlPanel.noLoop();
  controlPanel.setActionOnClose(G4P.EXIT_APP);
  controlPanel.addDrawHandler(this, "controlPanelDraw");
  spawnedObject = new GDropList(controlPanel, 20, 40, 80, 80, 3, 20);
  spawnedObject.setItems(loadStrings("list_681934"), 0);
  spawnedObject.addEventHandler(this, "spawnedObjectChanged");
  timeStepControl = new GKnob(controlPanel, 120, 40, 60, 60, 0.8);
  timeStepControl.setTurnRange(0, 360);
  timeStepControl.setTurnMode(GKnob.CTRL_ANGULAR);
  timeStepControl.setShowArcOnly(false);
  timeStepControl.setOverArcOnly(false);
  timeStepControl.setIncludeOverBezel(false);
  timeStepControl.setShowTrack(true);
  timeStepControl.setLimits(60.0, 1.0, 600.0);
  timeStepControl.setNbrTicks(20);
  timeStepControl.setShowTicks(true);
  timeStepControl.setOpaque(false);
  timeStepControl.addEventHandler(this, "timeStepChanged");
  objectLabel = new GLabel(controlPanel, 20, 20, 80, 20);
  objectLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  objectLabel.setText("Object Type");
  objectLabel.setOpaque(false);
  timeLabel = new GLabel(controlPanel, 120, 0, 60, 40);
  timeLabel.setTextAlign(GAlign.CENTER, GAlign.BOTTOM);
  timeLabel.setText("Time Modifier");
  timeLabel.setOpaque(false);
  timeRatio = new GLabel(controlPanel, 90, 100, 120, 40);
  timeRatio.setTextAlign(GAlign.CENTER, GAlign.TOP);
  timeRatio.setText("My label");
  timeRatio.setOpaque(false);
  radiusLabel = new GLabel(controlPanel, 190, 20, 60, 20);
  radiusLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  radiusLabel.setText("Radius");
  radiusLabel.setOpaque(false);
  spawnVelocity = new GSlider2D(controlPanel, 260, 40, 60, 60);
  spawnVelocity.setLimitsX(0.0, -1.0, 1.0);
  spawnVelocity.setLimitsY(0.0, -1.0, 1.0);
  spawnVelocity.setNumberFormat(G4P.DECIMAL, 2);
  spawnVelocity.setOpaque(true);
  spawnVelocity.addEventHandler(this, "spawnVelocityChanged");
  velocityLabel = new GLabel(controlPanel, 260, 20, 60, 20);
  velocityLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  velocityLabel.setText("Velocity");
  velocityLabel.setOpaque(false);
  massLabel = new GLabel(controlPanel, 330, 20, 60, 20);
  massLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  massLabel.setText("Mass");
  massLabel.setOpaque(false);
  spawnRadius = new GTextField(controlPanel, 190, 40, 60, 20, G4P.SCROLLBARS_NONE);
  spawnRadius.setText("1");
  spawnRadius.setOpaque(true);
  spawnRadius.addEventHandler(this, "spawnRadiusChanged");
  spawnMass = new GTextField(controlPanel, 330, 40, 60, 20, G4P.SCROLLBARS_NONE);
  spawnMass.setText("1");
  spawnMass.setOpaque(true);
  spawnMass.addEventHandler(this, "spawnMassChanged");
  exponentMassLabel = new GLabel(controlPanel, 400, 20, 60, 20);
  exponentMassLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  exponentMassLabel.setText("*10^");
  exponentMassLabel.setOpaque(false);
  exponentMass = new GTextField(controlPanel, 400, 40, 60, 20, G4P.SCROLLBARS_NONE);
  exponentMass.setText("10");
  exponentMass.setOpaque(true);
  exponentMass.addEventHandler(this, "exponentMassChanged");
  resetButton = new GButton(controlPanel, 20, 70, 80, 20);
  resetButton.setText("RESET");
  resetButton.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  resetButton.addEventHandler(this, "resertClicked");
  controlPanel.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow controlPanel;
GDropList spawnedObject; 
GKnob timeStepControl; 
GLabel objectLabel; 
GLabel timeLabel; 
GLabel timeRatio; 
GLabel radiusLabel; 
GSlider2D spawnVelocity; 
GLabel velocityLabel; 
GLabel massLabel; 
GTextField spawnRadius; 
GTextField spawnMass; 
GLabel exponentMassLabel; 
GTextField exponentMass; 
GButton resetButton; 
