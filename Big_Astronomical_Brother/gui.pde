/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:393323:
  appc.background(230);
} //_CODE_:window1:393323:

public void spawnedObjectChanged(GDropList source, GEvent event) { //_CODE_:spawnedObject:681934:
  switch (spawnedObject.getSelectedText()){
    case "Asteroid":
      radius.setLimits(radius.getValueF(), 1, 10);
      break;
    case "Planet":
      radius.setLimits(radius.getValueF(), 10, 100);
      break;
    case "Star":
      radius.setLimits(radius.getValueF(), 10, 100);
      break;
  }
} //_CODE_:spawnedObject:681934:

public void timeStepChanged(GKnob source, GEvent event) { //_CODE_:timeStepControl:952075:
  timeStep = timeStepControl.getValueI();
  timeRatio.setText("1 year every " + round(15*60/timeStep * pow(10, 3)) / pow(10, 3) + " seconds");
} //_CODE_:timeStepControl:952075:

public void radiusChanged(GSlider source, GEvent event) { //_CODE_:radius:996978:

} //_CODE_:radius:996978:

public void velocityChanged(GSlider2D source, GEvent event) { //_CODE_:velocity:936818:

} //_CODE_:velocity:936818:

public void spawnMassChanged(GSlider source, GEvent event) { //_CODE_:spawnMass:785904:

} //_CODE_:spawnMass:785904:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  window1 = GWindow.getWindow(this, "Window title", 0, 0, 480, 140, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.EXIT_APP);
  window1.addDrawHandler(this, "win_draw1");
  spawnedObject = new GDropList(window1, 20, 40, 80, 80, 3, 10);
  spawnedObject.setItems(loadStrings("list_681934"), 0);
  spawnedObject.addEventHandler(this, "spawnedObjectChanged");
  timeStepControl = new GKnob(window1, 120, 40, 60, 60, 0.8);
  timeStepControl.setTurnRange(0, 360);
  timeStepControl.setTurnMode(GKnob.CTRL_ANGULAR);
  timeStepControl.setShowArcOnly(false);
  timeStepControl.setOverArcOnly(false);
  timeStepControl.setIncludeOverBezel(false);
  timeStepControl.setShowTrack(true);
  timeStepControl.setLimits(60.0, 1.0, 600.0);
  timeStepControl.setNbrTicks(20);
  timeStepControl.setShowTicks(true);
  timeStepControl.setOpaque(false);
  timeStepControl.addEventHandler(this, "timeStepChanged");
  objectLabel = new GLabel(window1, 20, 20, 80, 20);
  objectLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  objectLabel.setText("Object Type");
  objectLabel.setOpaque(false);
  timeLabel = new GLabel(window1, 120, 0, 60, 40);
  timeLabel.setTextAlign(GAlign.CENTER, GAlign.BOTTOM);
  timeLabel.setText("Time Modifier");
  timeLabel.setOpaque(false);
  timeRatio = new GLabel(window1, 90, 100, 120, 40);
  timeRatio.setTextAlign(GAlign.CENTER, GAlign.TOP);
  timeRatio.setText("My label");
  timeRatio.setOpaque(false);
  radius = new GSlider(window1, 250, 40, 60, 60, 10.0);
  radius.setShowValue(true);
  radius.setShowLimits(true);
  radius.setTextOrientation(G4P.ORIENT_LEFT);
  radius.setRotation(PI/2, GControlMode.CORNER);
  radius.setLimits(2, 1, 10);
  radius.setNumberFormat(G4P.INTEGER, 0);
  radius.setOpaque(false);
  radius.addEventHandler(this, "radiusChanged");
  radiusLabel = new GLabel(window1, 190, 20, 60, 20);
  radiusLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  radiusLabel.setText("Radius");
  radiusLabel.setOpaque(false);
  velocity = new GSlider2D(window1, 260, 40, 60, 60);
  velocity.setLimitsX(0.0, -1.0, 1.0);
  velocity.setLimitsY(0.0, -1.0, 1.0);
  velocity.setNumberFormat(G4P.DECIMAL, 2);
  velocity.setOpaque(true);
  velocity.addEventHandler(this, "velocityChanged");
  velocityLabel = new GLabel(window1, 260, 20, 60, 20);
  velocityLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  velocityLabel.setText("Velocity");
  velocityLabel.setOpaque(false);
  spawnMass = new GSlider(window1, 390, 40, 60, 60, 10.0);
  spawnMass.setShowValue(true);
  spawnMass.setShowLimits(true);
  spawnMass.setTextOrientation(G4P.ORIENT_LEFT);
  spawnMass.setRotation(PI/2, GControlMode.CORNER);
  spawnMass.setLimits(1, 1, 10);
  spawnMass.setNumberFormat(G4P.INTEGER, 0);
  spawnMass.setOpaque(false);
  spawnMass.addEventHandler(this, "spawnMassChanged");
  massLabel = new GLabel(window1, 330, 20, 60, 20);
  massLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  massLabel.setText("Mass");
  massLabel.setOpaque(false);
  window1.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow window1;
GDropList spawnedObject; 
GKnob timeStepControl; 
GLabel objectLabel; 
GLabel timeLabel; 
GLabel timeRatio; 
GSlider radius; 
GLabel radiusLabel; 
GSlider2D velocity; 
GLabel velocityLabel; 
GSlider spawnMass; 
GLabel massLabel; 
